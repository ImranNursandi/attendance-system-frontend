// src/pages/EmployeeForm.js
import React, { useEffect } from "react";
import { useForm } from "react-hook-form";
import { useNavigate, useParams } from "react-router-dom";
import {
  useEmployee,
  useCreateEmployee,
  useUpdateEmployee,
} from "../hooks/useEmployees";
import { useDepartments } from "../hooks/useDepartments";
import { toast } from "react-toastify";

const EmployeeForm = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const isEdit = Boolean(id);
  const toastId = React.useRef(null);

  const { data: employeeResponse, isLoading: employeeLoading } =
    useEmployee(id);
  const { data: departmentsResponse } = useDepartments();

  const employee = employeeResponse?.data?.data;
  const departments = departmentsResponse?.data?.data?.departments || [];

  const createMutation = useCreateEmployee();
  const updateMutation = useUpdateEmployee();

  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
    reset,
  } = useForm({
    defaultValues: {
      employee_id: "",
      department_id: "",
      name: "",
      email: "", // Only used for create mode
      phone: "",
      address: "",
      position: "",
      status: "active",
      join_date: new Date().toISOString().split("T")[0],
    },
  });

  // Populate form when employee data loads (for edit mode)
  useEffect(() => {
    if (isEdit && employee) {
      reset({
        employee_id: employee.employee_id || "",
        department_id: employee.department_id || "",
        name: employee.name || "",
        phone: employee.phone || "",
        address: employee.address || "",
        position: employee.position || "",
        status: employee.status || "active",
        join_date: employee.join_date
          ? new Date(employee.join_date).toISOString().split("T")[0]
          : new Date().toISOString().split("T")[0],
      });
    }
  }, [isEdit, employee, reset]);

  // Watch the email field to show username preview (only for create mode)
  const email = watch("email");

  const onSubmit = async (data) => {
    // Format the data for your API
    const formattedData = {
      ...data,
      department_id: parseInt(data.department_id),
      join_date: data.join_date ? new Date(data.join_date) : new Date(),
    };

    // Remove employee_id for new employees (will be generated by backend)
    if (!isEdit) {
      delete formattedData.employee_id;
    } else {
      // Remove email for edit mode since it's in User model
      delete formattedData.email;
    }

    if (isEdit) {
      updateMutation.mutate(
        { id, data: formattedData },
        {
          onSuccess: () => {
            toast.success("Employee updated successfully");
            navigate("/employees");
          },
          onError: (error) => {
            if (!toast.isActive(toastId.current)) {
              toastId.current = toast.error(
                error.response?.data?.error || "Failed to update employee"
              );
            }
          },
        }
      );
    } else {
      createMutation.mutate(formattedData, {
        onSuccess: (response) => {
          const responseData = response.data.data;
          const employeeData = responseData.employee || responseData;
          const generatedEmployeeId = employeeData.employee_id;

          if (responseData.user_account?.created) {
            toast.success(
              <div>
                <p className="font-bold text-lg mb-2">
                  ✅ Employee Created Successfully!
                </p>
                <div className="space-y-1 text-sm">
                  <p>
                    <span className="font-semibold">Employee ID:</span>{" "}
                    <span className="badge badge-primary">
                      {generatedEmployeeId}
                    </span>
                  </p>
                  <p>
                    <span className="font-semibold">Username:</span>{" "}
                    <span className="badge badge-outline">
                      {responseData.user_account.username}
                    </span>
                  </p>
                  <p>
                    <span className="font-semibold">Default Password:</span>{" "}
                    <span className="badge badge-warning">
                      {responseData.user_account.password}
                    </span>
                  </p>
                  <p className="text-xs text-gray-600 mt-2">
                    User account created automatically. Employee must change
                    password on first login.
                  </p>
                </div>
              </div>,
              {
                autoClose: 15000,
                closeButton: true,
                className: "toast-success",
              }
            );
          } else {
            toast.success(
              <div>
                <p className="font-bold">Employee Created Successfully!</p>
                <p className="text-sm">
                  Employee ID: <strong>{generatedEmployeeId}</strong>
                </p>
              </div>
            );
          }

          navigate("/employees");
        },
        onError: (error) => {
          if (!toast.isActive(toastId.current)) {
            toastId.current = toast.error(
              error.response?.data?.error || "Failed to create employee"
            );
          }
        },
      });
    }
  };

  // Generate username preview from email (only for create mode)
  const getUsernamePreview = () => {
    if (!email) return "";
    return email.split("@")[0];
  };

  // Show loading while employee data is being fetched
  if (isEdit && employeeLoading) {
    return (
      <div className="flex justify-center items-center min-h-64">
        <span className="loading loading-spinner loading-lg text-primary"></span>
        <span className="ml-3">Loading employee data...</span>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold">
          {isEdit ? "Edit Employee" : "Add New Employee"}
        </h1>
        <button
          onClick={() => navigate("/employees")}
          className="btn btn-outline btn-sm"
        >
          ← Back to List
        </button>
      </div>

      {/* Information Card */}
      <div
        className={`alert ${isEdit ? "alert-info" : "alert-success"} shadow-lg`}
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          className="stroke-current shrink-0 w-6 h-6"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
          ></path>
        </svg>
        <div>
          <h3 className="font-bold">
            {isEdit ? "Editing Employee" : "New Employee Information"}
          </h3>
          <div className="text-xs">
            {isEdit ? (
              <div>
                Update employee details. Email cannot be changed here as it's
                linked to the user account.
              </div>
            ) : (
              <div>
                A system user account will be automatically created with:
                <ul className="mt-1 ml-4 list-disc">
                  <li>
                    <strong>Employee ID:</strong> Automatically generated by
                    system
                  </li>
                  <li>
                    <strong>Username:</strong> First part of email (before @)
                    {email && (
                      <span className="ml-1 badge badge-ghost badge-xs">
                        Preview: {getUsernamePreview()}
                      </span>
                    )}
                  </li>
                  <li>
                    <strong>Default Password:</strong> Welcome123
                  </li>
                  <li>
                    <strong>Role:</strong> Employee
                  </li>
                  <li>Employee must change password on first login</li>
                </ul>
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="card bg-base-100 shadow-xl">
        <div className="card-body">
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            {/* Employee ID Display (Edit Mode) */}
            {isEdit && employee && (
              <div className="form-control">
                <label className="label">
                  <span className="label-text font-semibold">Employee ID</span>
                </label>
                <div className="p-3 bg-base-200 rounded-lg border">
                  <span className="font-mono text-lg font-bold text-primary">
                    {employee.employee_id}
                  </span>
                  <p className="text-xs text-gray-500 mt-1">
                    System-generated employee identifier
                  </p>
                </div>
              </div>
            )}

            {/* Basic Information Section */}
            <div className="border-b pb-6">
              <h2 className="text-xl font-semibold mb-4 text-primary">
                Basic Information
              </h2>
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                <div className="form-control flex flex-col gap-2">
                  <label className="label">
                    <span className="label-text font-semibold">
                      Full Name *
                    </span>
                  </label>
                  <input
                    type="text"
                    className="input input-bordered input-md"
                    {...register("name", { required: "Name is required" })}
                    placeholder="John Doe"
                  />
                  {errors.name && (
                    <span className="text-error text-sm mt-1">
                      {errors.name.message}
                    </span>
                  )}
                </div>

                {/* Email Field - Only show for Create mode */}
                {!isEdit && (
                  <div className="form-control flex flex-col gap-2">
                    <label className="label">
                      <span className="label-text font-semibold">Email *</span>
                    </label>
                    <input
                      type="email"
                      className="input input-bordered input-md"
                      {...register("email", {
                        required: "Email is required",
                        pattern: {
                          value: /^\S+@\S+$/i,
                          message: "Invalid email address",
                        },
                      })}
                      placeholder="john.doe@company.com"
                    />
                    {errors.email && (
                      <span className="text-error text-sm mt-1">
                        {errors.email.message}
                      </span>
                    )}
                    {email && (
                      <div className="text-xs text-info mt-1">
                        Username will be:{" "}
                        <strong>{getUsernamePreview()}</strong>
                      </div>
                    )}
                  </div>
                )}

                <div className="form-control flex flex-col gap-2">
                  <label className="label">
                    <span className="label-text font-semibold">Phone</span>
                  </label>
                  <input
                    type="tel"
                    className="input input-bordered input-md"
                    {...register("phone")}
                    placeholder="+1234567890"
                  />
                </div>

                {/* Employee ID Input (Only for edit mode if needed) */}
                {isEdit && (
                  <div className="form-control flex flex-col gap-2">
                    <label className="label">
                      <span className="label-text font-semibold">
                        Employee ID
                      </span>
                    </label>
                    <input
                      type="text"
                      className="input input-bordered input-md"
                      {...register("employee_id")}
                      placeholder="EMP001"
                    />
                    <p className="text-xs text-gray-500">
                      Only change if absolutely necessary
                    </p>
                  </div>
                )}
              </div>
            </div>

            {/* Employment Details Section */}
            <div className="border-b pb-6">
              <h2 className="text-xl font-semibold mb-4 text-primary">
                Employment Details
              </h2>
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                <div className="form-control flex flex-col gap-2">
                  <label className="label">
                    <span className="label-text font-semibold">
                      Department *
                    </span>
                  </label>
                  <select
                    className="select select-bordered select-md"
                    {...register("department_id", {
                      required: "Department is required",
                    })}
                  >
                    <option value="">Select Department</option>
                    {departments.map((dept) => (
                      <option key={dept.id} value={dept.id}>
                        {dept.name}
                      </option>
                    ))}
                  </select>
                  {errors.department_id && (
                    <span className="text-error text-sm mt-1">
                      {errors.department_id.message}
                    </span>
                  )}
                </div>

                <div className="form-control flex flex-col gap-2">
                  <label className="label">
                    <span className="label-text font-semibold">Position</span>
                  </label>
                  <input
                    type="text"
                    className="input input-bordered input-md"
                    {...register("position")}
                    placeholder="Software Engineer"
                  />
                </div>

                <div className="form-control flex flex-col gap-2">
                  <label className="label">
                    <span className="label-text font-semibold">Join Date</span>
                  </label>
                  <input
                    type="date"
                    className="input input-bordered input-md"
                    {...register("join_date")}
                  />
                </div>

                <div className="form-control flex flex-col gap-2">
                  <label className="label">
                    <span className="label-text font-semibold">Status</span>
                  </label>
                  <select
                    className="select select-bordered select-md"
                    {...register("status")}
                  >
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                    <option value="suspended">Suspended</option>
                  </select>
                </div>
              </div>
            </div>

            {/* Address Section */}
            <div>
              <h2 className="text-xl font-semibold mb-4 text-primary">
                Contact Information
              </h2>
              <div className="form-control flex flex-col gap-2">
                <label className="label">
                  <span className="label-text font-semibold">Address *</span>
                </label>
                <textarea
                  className="textarea textarea-bordered h-24 textarea-md"
                  placeholder="Enter full address..."
                  {...register("address", { required: "Address is required" })}
                />
                {errors.address && (
                  <span className="text-error text-sm mt-1">
                    {errors.address.message}
                  </span>
                )}
              </div>
            </div>

            {/* Action Buttons */}
            <div className="flex justify-end space-x-4 pt-4 border-t">
              <button
                type="button"
                onClick={() => navigate("/employees")}
                className="btn btn-outline btn-wide"
                disabled={createMutation.isLoading || updateMutation.isLoading}
              >
                Cancel
              </button>
              <button
                type="submit"
                className="btn btn-primary btn-wide"
                disabled={createMutation.isLoading || updateMutation.isLoading}
              >
                {createMutation.isLoading || updateMutation.isLoading ? (
                  <>
                    <span className="loading loading-spinner loading-sm"></span>
                    {isEdit ? "Updating..." : "Creating..."}
                  </>
                ) : (
                  <>{isEdit ? "Update Employee" : "Create Employee"}</>
                )}
              </button>
            </div>
          </form>
        </div>
      </div>

      {/* Loading State */}
      {(createMutation.isLoading || updateMutation.isLoading) && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-base-100 p-6 rounded-lg shadow-xl">
            <div className="flex items-center space-x-4">
              <span className="loading loading-spinner loading-lg text-primary"></span>
              <div>
                <p className="font-semibold">
                  {isEdit ? "Updating Employee..." : "Creating Employee..."}
                </p>
                <p className="text-sm text-gray-500">
                  Please wait while we process your request
                </p>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default EmployeeForm;
