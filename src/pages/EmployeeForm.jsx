// src/pages/EmployeeForm.js
import React, { useEffect } from "react";
import { useForm } from "react-hook-form";
import { useNavigate, useParams } from "react-router-dom";
import {
  useEmployee,
  useCreateEmployee,
  useUpdateEmployee,
} from "../hooks/useEmployees";
import { useDepartments } from "../hooks/useDepartments";
import { toast } from "react-toastify";

const EmployeeForm = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const isEdit = Boolean(id);
  const toastId = React.useRef(null);

  const { data: employeeResponse, isLoading: employeeLoading } =
    useEmployee(id);
  const { data: departmentsResponse } = useDepartments();

  const employee = employeeResponse?.data?.data;
  const departments = departmentsResponse?.data?.data?.departments || [];

  const createMutation = useCreateEmployee();
  const updateMutation = useUpdateEmployee();

  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
    reset,
  } = useForm({
    defaultValues: {
      employee_id: "",
      department_id: "",
      name: "",
      email: "",
      phone: "",
      address: "",
      position: "",
      status: "active",
      join_date: new Date().toISOString().split("T")[0],
    },
  });

  // Populate form when employee data loads (for edit mode)
  useEffect(() => {
    if (isEdit && employee) {
      reset({
        employee_id: employee.employee_id || "",
        department_id: employee.department_id || "",
        name: employee.name || "",
        phone: employee.phone || "",
        address: employee.address || "",
        position: employee.position || "",
        status: employee.status || "active",
        join_date: employee.join_date
          ? new Date(employee.join_date).toISOString().split("T")[0]
          : new Date().toISOString().split("T")[0],
      });
    }
  }, [isEdit, employee, reset]);

  // Watch the email field to show username preview (only for create mode)
  const email = watch("email");

  const onSubmit = async (data) => {
    // Format the data for your API
    const formattedData = {
      ...data,
      department_id: parseInt(data.department_id),
      join_date: data.join_date ? new Date(data.join_date) : new Date(),
    };

    // Remove employee_id for new employees (will be generated by backend)
    if (!isEdit) {
      delete formattedData.employee_id;
    } else {
      // Remove email for edit mode since it's in User model
      delete formattedData.email;
    }

    if (isEdit) {
      updateMutation.mutate(
        { id, data: formattedData },
        {
          onSuccess: () => {
            toast.success("Employee updated successfully");
            navigate("/employees");
          },
          onError: (error) => {
            if (!toast.isActive(toastId.current)) {
              toastId.current = toast.error(
                error.response?.data?.error || "Failed to update employee"
              );
            }
          },
        }
      );
    } else {
      createMutation.mutate(formattedData, {
        onSuccess: (response) => {
          const responseData = response.data.data;
          const employeeData = responseData.employee || responseData;
          const generatedEmployeeId = employeeData.employee_id;
          const setupToken = responseData.setup_token;

          // Success toast with account setup information
          toast.success(
            <div className="text-black">
              {/* Header */}
              <p className="font-semibold text-lg mb-2 flex items-center gap-2">
                ‚úÖ Employee Created Successfully!
              </p>

              {/* Card container */}
              <div className="bg-gray-800/70 rounded-lg border border-gray-700 p-4 space-y-3">
                {/* Employee info */}
                <div className="flex items-center justify-between text-sm">
                  <span className="font-medium text-gray-300">
                    Employee ID:
                  </span>
                  <span className="px-3 py-1 rounded-full text-xs font-semibold bg-blue-600 border border-blue-700">
                    {generatedEmployeeId}
                  </span>
                </div>

                <div className="flex items-center justify-between text-sm">
                  <span className="font-medium text-gray-300">Status:</span>
                  <span className="px-3 py-1 rounded-full text-xs font-semibold bg-yellow-600 border border-yellow-700 whitespace-normal text-center leading-tight">
                    Awaiting Account Setup
                  </span>
                </div>

                {/* Email info */}
                <div className="p-3 bg-blue-900/40 rounded border border-blue-800/60 text-sm">
                  <p className="text-blue-300 font-semibold mb-1">
                    üìß Setup Email Sent
                  </p>
                  <p className="text-gray-300">
                    An account setup email has been sent to{" "}
                    <strong>{data.email}</strong>.
                  </p>
                  <p className="text-xs text-blue-400 mt-2">
                    The employee must complete setup within 7 days.
                  </p>
                </div>

                {/* Backup token */}
                {setupToken && (
                  <div className="p-3 bg-orange-900/30 rounded border border-orange-800/50 text-sm">
                    <p className="text-orange-300 font-semibold mb-2 flex items-center gap-1">
                      üîë Backup Setup Token
                    </p>
                    <div className="flex items-center gap-2">
                      <code className="text-xs bg-black/50 p-2 rounded flex-1 break-all text-orange-200">
                        {setupToken}
                      </code>
                      <button
                        onClick={() => {
                          navigator.clipboard.writeText(setupToken);
                          toast.info("Setup token copied to clipboard");
                        }}
                        className="btn btn-xs btn-ghost text-orange-300"
                      >
                        Copy
                      </button>
                    </div>
                    <p className="text-xs text-orange-400 mt-2">
                      Use this token if the email fails to arrive.
                    </p>
                  </div>
                )}
              </div>
            </div>,
            {
              closeButton: true,
              className:
                "bg-gray-900 border border-gray-700 shadow-xl text-white rounded-lg",
              progressClassName: "bg-blue-500",
            }
          );

          navigate("/employees");
        },
        onError: (error) => {
          if (!toast.isActive(toastId.current)) {
            toastId.current = toast.error(
              error.response?.data?.error || "Failed to create employee"
            );
          }
        },
      });
    }
  };

  // Generate username preview from email (only for create mode)
  const getUsernamePreview = () => {
    if (!email) return "";
    return email.split("@")[0];
  };

  // Show loading while employee data is being fetched
  if (isEdit && employeeLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 p-6">
        <div className="max-w-4xl mx-auto flex justify-center items-center min-h-64">
          <div className="text-center">
            <div className="loading loading-spinner loading-lg text-blue-400"></div>
            <p className="text-gray-400 mt-3">Loading employee data...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 p-6">
      <div className="max-w-4xl mx-auto space-y-8">
        {/* Header */}
        <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4">
          <div>
            <h1 className="text-3xl lg:text-4xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
              {isEdit ? "Edit Employee" : "Add New Employee"}
            </h1>
            <p className="text-gray-400 mt-2">
              {isEdit
                ? "Update employee details and information"
                : "Register a new employee in the system"}
            </p>
          </div>
          <button
            onClick={() => navigate("/employees")}
            className="btn btn-outline border-gray-600 text-gray-300 hover:bg-gray-700 hover:border-gray-500 px-6"
          >
            ‚Üê Back to List
          </button>
        </div>

        {/* Information Card */}
        <div
          className={`bg-gradient-to-r ${
            isEdit
              ? "from-blue-900/50 to-blue-800/30"
              : "from-green-900/50 to-green-800/30"
          } rounded-2xl shadow-lg border ${
            isEdit ? "border-blue-800/50" : "border-green-800/50"
          } p-6`}
        >
          <div className="flex items-start gap-4">
            <div
              className={`p-3 rounded-xl ${
                isEdit ? "bg-blue-900/50" : "bg-green-900/50"
              } border ${
                isEdit ? "border-blue-800/50" : "border-green-800/50"
              }`}
            >
              <span className="text-2xl">{isEdit ? "üìù" : "üë•"}</span>
            </div>
            <div className="flex-1">
              <h3 className="font-bold text-white text-lg mb-3">
                {isEdit ? "Editing Employee" : "New Employee Information"}
              </h3>
              <div className="text-gray-300 text-sm">
                {isEdit ? (
                  <p>
                    Update employee details. Email cannot be changed here as
                    it's linked to the user account.
                  </p>
                ) : (
                  <div className="space-y-3">
                    <p>
                      A secure account setup process will be initiated with the
                      following details:
                    </p>
                    <ul className="ml-4 space-y-2">
                      <li className="flex items-center gap-3">
                        <span className="w-2 h-2 bg-blue-400 rounded-full flex-shrink-0"></span>
                        <span>
                          <strong className="text-blue-300">
                            Employee ID:
                          </strong>{" "}
                          Automatically generated by system
                        </span>
                      </li>
                      <li className="flex items-center gap-3">
                        <span className="w-2 h-2 bg-blue-400 rounded-full flex-shrink-0"></span>
                        <span>
                          <strong className="text-blue-300">Username:</strong>{" "}
                          First part of email (before @)
                          {email && (
                            <span className="ml-2 badge badge-ghost badge-sm bg-gray-700/50 border-gray-600">
                              Preview: {getUsernamePreview()}
                            </span>
                          )}
                        </span>
                      </li>
                      <li className="flex items-center gap-3">
                        <span className="w-2 h-2 bg-green-400 rounded-full flex-shrink-0"></span>
                        <span>
                          <strong className="text-green-300">
                            Secure Setup:
                          </strong>{" "}
                          Employee will receive setup email
                        </span>
                      </li>
                      <li className="flex items-center gap-3">
                        <span className="w-2 h-2 bg-green-400 rounded-full flex-shrink-0"></span>
                        <span>
                          <strong className="text-green-300">Security:</strong>{" "}
                          No default password - employee sets their own
                        </span>
                      </li>
                      <li className="flex items-center gap-3">
                        <span className="w-2 h-2 bg-yellow-400 rounded-full flex-shrink-0"></span>
                        <span>
                          <strong className="text-yellow-300">Expiry:</strong>{" "}
                          Setup link valid for 7 days
                        </span>
                      </li>
                    </ul>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Main Form */}
        <div className="bg-gray-800 rounded-2xl shadow-lg border border-gray-700 overflow-hidden">
          <div className="p-6 border-b border-gray-700">
            <div className="flex items-center gap-3">
              <div className="w-2 h-6 bg-blue-500 rounded-full"></div>
              <h2 className="text-xl font-bold text-white">Employee Details</h2>
            </div>
          </div>

          <div className="p-6">
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-8">
              {/* Employee ID Display (Edit Mode) */}
              {isEdit && employee && (
                <div className="bg-gray-700/50 rounded-xl p-6 border border-gray-600 mb-6">
                  <label className="block text-sm font-semibold text-gray-300 mb-3">
                    Employee ID
                  </label>
                  <div className="flex items-center gap-4">
                    <span className="font-mono text-xl font-bold text-blue-400 bg-blue-900/30 px-4 py-3 rounded-lg border border-blue-800/50">
                      {employee.employee_id}
                    </span>
                    <p className="text-sm text-gray-400">
                      System-generated employee identifier
                    </p>
                  </div>
                </div>
              )}

              {/* Basic Information Section */}
              <div className="space-y-6 pb-8 border-b border-gray-700">
                <div className="flex items-center gap-3 mb-2">
                  <div className="w-2 h-6 bg-green-500 rounded-full"></div>
                  <h3 className="text-lg font-bold text-white">
                    Basic Information
                  </h3>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Name Field */}
                  <div className="space-y-2">
                    <label className="block text-sm font-semibold text-gray-300">
                      Full Name *
                    </label>
                    <input
                      type="text"
                      className="w-full input input-bordered bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:border-blue-500 h-12"
                      {...register("name", { required: "Name is required" })}
                      placeholder="John Doe"
                    />
                    {errors.name && (
                      <div className="text-red-400 text-sm flex items-center gap-2 mt-1">
                        <span>‚ö†Ô∏è</span>
                        {errors.name.message}
                      </div>
                    )}
                  </div>

                  {/* Email Field - Only show for Create mode */}
                  {!isEdit && (
                    <div className="space-y-2">
                      <label className="block text-sm font-semibold text-gray-300">
                        Email *
                      </label>
                      <input
                        type="email"
                        className="w-full input input-bordered bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:border-blue-500 h-12"
                        {...register("email", {
                          required: "Email is required",
                          pattern: {
                            value: /^\S+@\S+$/i,
                            message: "Invalid email address",
                          },
                        })}
                        placeholder="john.doe@company.com"
                      />
                      {errors.email && (
                        <div className="text-red-400 text-sm flex items-center gap-2 mt-1">
                          <span>‚ö†Ô∏è</span>
                          {errors.email.message}
                        </div>
                      )}
                      {email && (
                        <div className="text-sm text-blue-400 bg-blue-900/20 p-3 rounded border border-blue-800/30 mt-2">
                          <strong>Username Preview:</strong>{" "}
                          {getUsernamePreview()}
                        </div>
                      )}
                    </div>
                  )}

                  {/* Phone Field */}
                  <div className="space-y-2">
                    <label className="block text-sm font-semibold text-gray-300">
                      Phone
                    </label>
                    <input
                      type="tel"
                      className="w-full input input-bordered bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:border-blue-500 h-12"
                      {...register("phone")}
                      placeholder="+1234567890"
                    />
                  </div>

                  {/* Employee ID Input (Only for edit mode if needed) */}
                  {isEdit && (
                    <div className="space-y-2">
                      <label className="block text-sm font-semibold text-gray-300">
                        Employee ID
                      </label>
                      <input
                        type="text"
                        className="w-full input input-bordered bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:border-blue-500 h-12"
                        {...register("employee_id")}
                        placeholder="EMP001"
                      />
                      <p className="text-xs text-gray-500 mt-2">
                        Only change if absolutely necessary
                      </p>
                    </div>
                  )}
                </div>
              </div>

              {/* Employment Details Section */}
              <div className="space-y-6 pb-8 border-b border-gray-700">
                <div className="flex items-center gap-3 mb-2">
                  <div className="w-2 h-6 bg-purple-500 rounded-full"></div>
                  <h3 className="text-lg font-bold text-white">
                    Employment Details
                  </h3>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Department Field */}
                  <div className="space-y-2">
                    <label className="block text-sm font-semibold text-gray-300">
                      Department *
                    </label>
                    <select
                      className="w-full select select-bordered bg-gray-700 border-gray-600 text-white focus:border-blue-500 h-12"
                      {...register("department_id", {
                        required: "Department is required",
                      })}
                    >
                      <option value="" className="text-gray-500">
                        Select Department
                      </option>
                      {departments.map((dept) => (
                        <option key={dept.id} value={dept.id}>
                          {dept.name}
                        </option>
                      ))}
                    </select>
                    {errors.department_id && (
                      <div className="text-red-400 text-sm flex items-center gap-2 mt-1">
                        <span>‚ö†Ô∏è</span>
                        {errors.department_id.message}
                      </div>
                    )}
                  </div>

                  {/* Position Field */}
                  <div className="space-y-2">
                    <label className="block text-sm font-semibold text-gray-300">
                      Position
                    </label>
                    <input
                      type="text"
                      className="w-full input input-bordered bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:border-blue-500 h-12"
                      {...register("position")}
                      placeholder="Software Engineer"
                    />
                  </div>

                  {/* Join Date Field */}
                  <div className="space-y-2">
                    <label className="block text-sm font-semibold text-gray-300">
                      Join Date
                    </label>
                    <input
                      type="date"
                      className="w-full input input-bordered bg-gray-700 border-gray-600 text-white focus:border-blue-500 h-12"
                      {...register("join_date")}
                    />
                  </div>

                  {/* Status Field */}
                  <div className="space-y-2">
                    <label className="block text-sm font-semibold text-gray-300">
                      Status
                    </label>
                    <select
                      className="w-full select select-bordered bg-gray-700 border-gray-600 text-white focus:border-blue-500 h-12"
                      {...register("status")}
                    >
                      <option value="active" className="text-green-400">
                        Active
                      </option>
                      <option value="inactive" className="text-gray-400">
                        Inactive
                      </option>
                      <option value="suspended" className="text-orange-400">
                        Suspended
                      </option>
                    </select>
                  </div>
                </div>
              </div>

              {/* Address Section */}
              <div className="space-y-6">
                <div className="flex items-center gap-3 mb-2">
                  <div className="w-2 h-6 bg-orange-500 rounded-full"></div>
                  <h3 className="text-lg font-bold text-white">
                    Contact Information
                  </h3>
                </div>

                <div className="space-y-2">
                  <label className="block text-sm font-semibold text-gray-300">
                    Address *
                  </label>
                  <textarea
                    className="w-full textarea textarea-bordered bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:border-blue-500 h-24 resize-none"
                    placeholder="Enter full address..."
                    {...register("address", {
                      required: "Address is required",
                    })}
                  />
                  {errors.address && (
                    <div className="text-red-400 text-sm flex items-center gap-2 mt-1">
                      <span>‚ö†Ô∏è</span>
                      {errors.address.message}
                    </div>
                  )}
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex flex-col sm:flex-row justify-end gap-4 pt-8 border-t border-gray-700">
                <button
                  type="button"
                  onClick={() => navigate("/employees")}
                  className="btn btn-outline border-gray-600 text-gray-300 hover:bg-gray-700 hover:border-gray-500 h-12 min-h-12 flex-1 sm:flex-none sm:w-32"
                  disabled={
                    createMutation.isLoading || updateMutation.isLoading
                  }
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="btn bg-gradient-to-r from-blue-500 to-purple-600 border-none text-white hover:from-blue-600 hover:to-purple-700 h-12 min-h-12 flex-1 sm:flex-none sm:w-48"
                  disabled={
                    createMutation.isLoading || updateMutation.isLoading
                  }
                >
                  {createMutation.isLoading || updateMutation.isLoading ? (
                    <>
                      <span className="loading loading-spinner loading-sm"></span>
                      {isEdit ? "Updating..." : "Creating..."}
                    </>
                  ) : (
                    <>{isEdit ? "Update Employee" : "Create Employee"}</>
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>

        {/* Loading Overlay */}
        {(createMutation.isLoading || updateMutation.isLoading) && (
          <div className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50">
            <div className="bg-gray-800 p-8 rounded-2xl shadow-xl border border-gray-700 max-w-md w-full mx-4">
              <div className="flex items-center space-x-4">
                <div className="loading loading-spinner loading-lg text-blue-400"></div>
                <div>
                  <p className="font-semibold text-white text-lg">
                    {isEdit ? "Updating Employee..." : "Creating Employee..."}
                  </p>
                  <p className="text-gray-400 text-sm mt-1">
                    {!isEdit && "Sending account setup email..."}
                    {isEdit && "Updating employee details..."}
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default EmployeeForm;
